- hosts: all
  become: yes
  tasks:
    - name: include vars from provision/vars.yml
      include_vars:
        file: vars.yml

# - name: Basic packages
#   import_playbook: playbooks/packages.yaml

# - name: House keeping
#   import_playbook: playbooks/housekeeping.yaml

# - name: Basic firewall rules
#   import_playbook: playbooks/firewall.yaml

# - name: Install docker
#   import_playbook: playbooks/docker/docker.yaml

# - name: Ad blocking stuff
#   import_playbook: playbooks/ads/ads.yaml

# - name: Speed test help tool
#   import_playbook: playbooks/speedtest/speedtest.yaml

# - name: Install notes
#   import_playbook: playbooks/notes/notes.yaml

# - name: Install gotify
#   import_playbook: playbooks/gotify/gotify.yaml

- name: Install grocy
  import_playbook: playbooks/grocy/grocy.yaml

# - name: Install torrents
#   import_playbook: playbooks/torrents/torrents.yaml

# - name: Install simple client
#   import_playbook: playbooks/youtube/youtube.yaml

# - name: Install simplelogin client
#   import_playbook: playbooks/simplelogin/simplelogin.yaml

# - name: Install media emby
#   import_playbook: playbooks/media/media.yaml

# - name: Install nextcloud
#   import_playbook: playbooks/nextcloud/nextcloud.yaml

# - name: Install media photos
#   import_playbook: playbooks/photos/photos.yaml

# - name: Install cat feeder
#   import_playbook: playbooks/cat_feeder/cat.yaml

# - name: Install Decibel Meter
#   import_playbook: playbooks/decibel_meter/decibel_meter.yaml

# - hosts: master
#   become: yes
#   roles:
#     - role: geerlingguy.certbot
#   vars:
#     certbot_auto_renew: false
#     certbot_admin_email: "{{ email }}"
#     certbot_create_if_missing: true
#     certbot_certs:
#       - domains:
#         - "{{ domain }}"


# - hosts: master
#   become: yes
#   roles:
#     - role: geerlingguy.certbot
#   vars:
#     certbot_auto_renew: false
#     certbot_admin_email: "{{ email }}"
#     certbot_create_if_missing: true
#     certbot_certs:
#       - domains:
#         - "macbury.ninja"

# - hosts: master
#   become: yes
#   roles:
#     - role: geerlingguy.certbot
#   vars:
#     certbot_auto_renew: false
#     certbot_admin_email: "{{ email }}"
#     certbot_create_if_missing: true
#     certbot_certs:
#       - domains:
#         - "{{ rss_domain }}"

# - hosts: master
#   become: yes
#   roles:
#     - role: geerlingguy.certbot
#   vars:
#     certbot_auto_renew: false
#     certbot_admin_email: "{{ email }}"
#     certbot_create_if_missing: true
#     certbot_certs:
#       - domains:
#         - "{{ podcast_domain }}"

# - hosts: master
#   become: yes
#   roles:
#     - role: geerlingguy.certbot
#   vars:
#     certbot_auto_renew: false
#     certbot_admin_email: "{{ email }}"
#     certbot_create_if_missing: true
#     certbot_certs:
#       - domains:
#         - "{{ monio_domain }}"



# Nginx
# - hosts: master
#   become: yes
#   roles:
#     - role: geerlingguy.nginx
#   handlers:
#     - name: restart nginx
#       become: yes
#       service:
#         name: nginx
#         enabled: yes
#         state: restarted
#   tasks:
    # - name: Create /etc/nginx/sites-enabled/rss.conf
    #   template:
    #     src: ./etc/nginx/sites-enabled/rss.conf.j2
    #     dest: /etc/nginx/sites-enabled/rss.conf
    #   notify:
    #     - reload nginx
    #     - restart nginx
#     - name: Create /etc/nginx/sites-enabled/notes.conf
#       template:
#         src: ./etc/nginx/sites-enabled/notes.conf.j2
#         dest: /etc/nginx/sites-enabled/notes.conf
#       notify:
#         - reload nginx
#         - restart nginx
#     - name: Create /etc/nginx/sites-enabled/blog.conf
#       template:
#         src: ./etc/nginx/sites-enabled/blog.conf.j2
#         dest: /etc/nginx/sites-enabled/blog.conf
#       notify:
#         - reload nginx
#         - restart nginx
#     - name: Create /etc/nginx/sites-enabled/home-assistant.conf
#       template:
#         src: ./etc/nginx/sites-enabled/home-assistant.conf.j2
#         dest: /etc/nginx/sites-enabled/home-assistant.conf
#       notify:
#         - reload nginx
#         - restart nginx
    # - name: Create /etc/nginx/sites-enabled/monio.conf
    #   template:
    #     src: ./etc/nginx/sites-enabled/monio.conf.j2
    #     dest: /etc/nginx/sites-enabled/monio.conf
    #   notify:
    #     - reload nginx
    #     - restart nginx

#     - name: Create /etc/nginx/sites-enabled/honeytap.conf
#       template:
#         src: ./etc/nginx/sites-enabled/default.conf.j2
#         dest: /etc/nginx/sites-enabled/default
#       notify:
#         - reload nginx
#         - restart nginx
#     - name: Create /var/www/html/index.html
#       template:
#         src: ./var/www/html/index.html
#         dest: /var/www/html/index.html
#       notify:
#         - reload nginx
#         - restart nginx
#     - name: Create /var/www/html/403.html
#       template:
#         src: ./var/www/html/403.html
#         dest: /var/www/html/403.html
#       notify:
#         - reload nginx
#         - restart nginx
# Home Assistant
# - hosts: master
#   become: yes
#   handlers:
#     - name: reload systemctl
#       become: yes
#       command: systemctl daemon-reload
#     - name: restart systemd-resolved
#       service:
#         name: systemd-resolved
#         state: restarted
#     - name: reload afp
#       service:
#         name: netatalk
#         state: restarted
#   tasks:
#     - name: Fallback resolver to pihole and then try cloudflare on boot
#       become: yes
#       shell: 'ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf'
#       notify:
#         - restart systemd-resolved
#     - name: Fallback resolver to pihole and then try cloudflare on boot
#       become: yes
#       template:
#         force: yes
#         src: ./etc/systemd/resolved.conf
#         dest: /etc/systemd/resolved.conf
#       notify:
#         - restart systemd-resolved
#     - name: Creates app directory
#       file:
#         path: /smart-house
#         state: directory
#         owner: "{{ ansible_user }}"
#         group: "{{ ansible_user }}"
#     - name: Create smart-house.service
#       template:
#         src: ./lib/systemd/system/smart-house.service.j2
#         dest: /lib/systemd/system/smart-house.service
#       notify:
#         - reload systemctl
#     - name: Create pihole.service
#       template:
#         src: ./lib/systemd/system/pihole.service.j2
#         dest: /lib/systemd/system/pihole.service
#       notify:
#         - reload systemctl
#     - name: Create support.service
#       template:
#         src: ./lib/systemd/system/support.service.j2
#         dest: /lib/systemd/system/support.service
#       notify:
#         - reload systemctl
    # - name: Create health.service
    #   template:
    #     src: ./lib/systemd/system/health.service.j2
    #     dest: /lib/systemd/system/health.service
    #   notify:
    #     - reload systemctl

#     - name: Create media.service
#       template:
#         src: ./lib/systemd/system/media.service.j2
#         dest: /lib/systemd/system/media.service
#       notify:
#         - reload systemctl
#     - name: Append domain to /etc/hosts
#       lineinfile:
#         dest: /etc/hosts
#         line: "192.168.1.12 {{ domain }}"
#         regexp: "{{ domain }}"
#         state: present
#         insertafter: EOF
#         create: True

# # Setup oh my zsh
# - hosts: all
#   become: yes
#   tasks:
#     - name: Updating current user
#       user:
#         name: '{{ ansible_user }}'
#         append: yes
#         shell: /usr/bin/zsh
#     - name: Updating root user
#       user:
#         name: 'root'
#         append: yes
#         shell: /usr/bin/zsh
#     - name: Install oh-my-zsh to current user
#       become: no
#       git:
#         repo: 'https://github.com/robbyrussell/oh-my-zsh.git'
#         dest: '~/.oh-my-zsh'
#     - name: 'Copy ~/.zshrc'
#       become: no
#       shell: 'cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc'
#     - name: Install oh-my-zsh to root
#       git:
#         repo: 'https://github.com/robbyrussell/oh-my-zsh.git'
#         dest: '~/.oh-my-zsh'
#     - name: 'Copy ~/.zshrc'
#       shell: 'cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc'

# # # Shell and configs
# - hosts: master
#   tasks:
#     - name: Remove /smart-house/lost+found
#       become: yes
#       file:
#         path: /smart-house/lost+found
#         state: absent
#     - name: Clone smart-house repo
#       git:
#         repo: 'git@github.com:macbury/SmartHouse.git'
#         dest: /smart-house
#         accept_hostkey: yes
#         update: no
#     - name: Creates grafana directory
#       become: yes
#       file:
#         path: /smart-house/.docker/data/grafana
#         state: directory
#         owner: "472"
#         group: "472"
#     - name: Creates log directory
#       become: yes
#       file:
#         path: /smart-house/.docker/log/
#         state: directory
#         owner: "root"
#         group: "root"
#     - name: Creates pihole directory
#       become: yes
#       file:
#         path: /smart-house/.docker/data/pihole/dnsmasq.d/
#         state: directory
#     - name: Dns script
#       become: yes
#       template:
#         src: ./etc/dnsmasq.d/02-localhosts.conf.j2
#         dest: /smart-house/.docker/data/pihole/dnsmasq.d/02-localhosts.conf
#     - name: Domain list
#       become: yes
#       template:
#         src: ./etc/pihole/lan.list.j2
#         dest: /smart-house/.docker/data/pihole/pihole/lan.list
#     - name: Create symbolic link for bin/smart-hose
#       become: yes
#       file:
#         src: "/smart-house/bin/smart-house"
#         dest: "/usr/bin/smart-house"
#         state: link
    # - name: Copy example .env.home-assistant.example
    #   shell: 'cp /smart-house/.env.home-assistant.example /smart-house/.env.home-assistant'
    #   args:
    #     creates: '/smart-house/.env.home-assistant'
    # - name: Copy example .env.influxdb.example
    #   shell: 'cp /smart-house/.env.influxdb.example /smart-house/.env.influxdb'
    #   args:
    #     creates: '/smart-house/.env.influxdb'
    # - name: Copy example .env.pihole.example
    #   shell: 'cp /smart-house/.env.pihole.example /smart-house/.env.pihole'
    #   args:
    #     creates: '/smart-house/.env.pihole'
    # - name: Copy example .env.postgresql.example
    #   shell: 'cp /smart-house/.env.postgresql.example /smart-house/.env.postgresql'
    #   args:
    #     creates: '/smart-house/.env.postgresql'
    # - name: Copy example .env.grafana.example
    #   shell: 'cp /smart-house/.env.grafana.example /smart-house/.env.grafana'
    #   args:
    #     creates: '/smart-house/.env.grafana'
    # - name: Copy example .env.crontab.example
    #   shell: 'cp /smart-house/.env.crontab.example /smart-house/.env.crontab'
    #   args:
    #     creates: '/smart-house/.env.crontab'
    # - name: create .env.local file
    #   template:
    #     src: .env.local.j2
    #     dest: /smart-house/.env.local
    #   vars:
    #     env:
    #       HOME_ASSISTANT_DOMAIN: "{{ domain }}"
    #       HOME_ASSISTANT_URL: "https://{{ domain }}"
    # - name: Insert SMART_HOUSE_DIR env variable to current user
    #   lineinfile:
    #     path: "~/.zshrc"
    #     line: "export SMART_HOUSE_DIR=/smart-house"
    # - name: Insert SMART_HOUSE_DIR env variable to root
    #   become: yes
    #   lineinfile:
    #     path: "~/.zshrc"
    #     line: "export SMART_HOUSE_DIR=/smart-house"
    # - name: 'pip3 packages'
    #   become: yes
    #   pip:
    #     executable: /usr/bin/pip3
    #     requirements: '/smart-house/requirements.txt'

# # # Setup cron
# - hosts: master
#   become: yes
#   tasks:
#     - name: Add crontab entry for refreshing dns
#       cron:
#         name: "ddns"
#         minute: "*/15"
#         job: "/usr/bin/zsh -l -c 'SMART_HOUSE_DIR=/smart-house smart-house ddns' >> /tmp/ddns.log 2>&1"
#     - name: Add crontab entry for certs
#       cron:
#         name: "certs"
#         hour: "4"
#         minute: "0"
#         job: "/usr/bin/zsh -l -c 'SMART_HOUSE_DIR=/smart-house smart-house certbot' >> /tmp/certbot.log 2>&1"
#     - name: Add crontab entry for backup
#       cron:
#         name: "backup"
#         hour: "1"
#         minute: "0"
#         job: "/usr/bin/zsh -l -c 'SMART_HOUSE_DIR=/smart-house smart-house backup' >> /tmp/backup.log 2>&1"
#     - name: Cleanup docker shit
#       cron:
#         name: 'docker'
#         hour: "3"
#         minute: "0"
#         job: "/usr/bin/zsh -l -c 'docker system prune -f'"
#     - name: Cleanup old logs
#       cron:
#         name: 'logs'
#         hour: "22"
#         minute: "0"
#         job: '/usr/bin/zsh -l -c "rm /tmp/*.log"'
#     - name: Cleanup covers
#       cron:
#         name: 'cover'
#         hour: "2"
#         minute: "0"
#         job: '/usr/bin/zsh -l -c "rm /tmp/cover_*"'
# # # Setup mosquitto passwd
# - hosts: master
#   become: yes
#   tasks:
#     - name: Install mosquitto
#       apt:
#         name: mosquitto
#     - name: Disable mosquitto service on ubuntu desktop
#       service:
#         name: mosquitto
#         state: stopped
#     - name: Creates mosquitto docker directory
#       file:
#         path: /smart-house/.docker/data/mosquitto
#         state: directory
#         owner: "1883"
#         group: "1883"
#     - name: Create mosquitto/users.db
#       file:
#         path: /smart-house/.docker/data/mosquitto/users.db
#         state: touch
#         owner: "1883"
#         group: "1883"
#     - name: Create mosquitto.log
#       file:
#         path: /smart-house/.docker/log/mosquitto.log
#         state: touch
#         owner: "1883"
#         group: "1883"

# # # Setup AFP
# - hosts: master
#   become: yes
#   roles:
#     - role: brianhartsock.netatalk
#   vars:
#     netatalk_shares:
#       - /smart-house "Config" allow:macbury cnidscheme:cdb"

# # # Install kiosk on panel
# - hosts: panel
#   tasks:
#     - name: Create kiosk.service
#       template:
#         src: ./lib/systemd/system/kiosk.service.j2
#         dest: /lib/systemd/system/kiosk.service
#       notify:
#         - reload systemctl
#     - name: Clone smart-house repo
#       git:
#         repo: 'git@github.com:macbury/SmartHouse.git'
#         dest: /smart-house
#         accept_hostkey: yes
#         update: yes
#     - name: Install electron
#       shell: 'cd /smart-house/panel && npm install'
# # # Gnome
# - hosts: panel
#   tasks:
#     - name: Download GNOME Shell gestures extensions
#       get_url:
#         url: "https://extensions.gnome.org/extension-data/disable-gestures%40mattbell.com.au.v2.shell-extension.zip"
#         dest: "/tmp/disable-gesture.zip"
#     - name: Create GNOME gestures extension directories
#       file:
#         path: /home/{{ ansible_user }}/.local/share/gnome-shell/extensions/disable-gestures@mattbell.com.au
#         state: directory
#     - name: Unzip GNOME gestures extensions
#       unarchive:
#         src: "/tmp/disable-gesture.zip"
#         dest: "/home/{{ ansible_user }}/.local/share/gnome-shell/extensions/disable-gestures@mattbell.com.au"
#         remote_src: yes
#     - name: Enable gnome gestures extension
#       shell: 'gnome-shell-extension-tool -e disable-gestures@mattbell.com.au'
#       ignore_errors: yes
#     - name: Download GNOME Shell onboard extensions
#       get_url:
#         url: "https://extensions.gnome.org/extension-data/onboard%40simon.schumann.web.de.v4.shell-extension.zip"
#         dest: "/tmp/onboard.zip"
#     - name: Create GNOME onboard extension directories
#       file:
#         path: /home/{{ ansible_user }}/.local/share/gnome-shell/extensions/onboardintegration@simon.schumann.web.de
#         state: directory
#     - name: Unzip GNOME onboard extensions
#       unarchive:
#         src: "/tmp/disable-gesture.zip"
#         dest: "/home/{{ ansible_user }}/.local/share/gnome-shell/extensions/onboardintegration@simon.schumann.web.de"
#         remote_src: yes
#     - name: Enable gnome onboard extension
#       shell: 'gnome-shell-extension-tool -e onboardintegration@simon.schumann.web.de'
#       ignore_errors: yes

# # # Fail2Ban setup
# - hosts: master
#   become: yes
#   roles:
#     - role: nickjj.fail2ban
#   handlers:
#     - name: restart fail2ban
#       service:
#         name: fail2ban
#         state: restarted
#   tasks:
#     - name: Copy filter nginx-http-auth.conf to fail2ban
#       template:
#         force: yes
#         src: ./etc/fail2ban/filter.d/nginx-http-auth.conf
#         dest: /etc/fail2ban/filter.d/nginx-http-auth.conf
#       notify:
#         - restart fail2ban
#     - name: Copy filter nginx-badbots.conf to fail2ban
#       template:
#         force: yes
#         src: ./etc/fail2ban/filter.d/nginx-badbots.conf
#         dest: /etc/fail2ban/filter.d/nginx-badbots.conf
#       notify:
#         - restart fail2ban
#     - name: Copy filter nginx-forbidden.conf to fail2ban
#       template:
#         force: yes
#         src: ./etc/fail2ban/filter.d/nginx-forbidden.conf
#         dest: /etc/fail2ban/filter.d/nginx-forbidden.conf
#       notify:
#         - restart fail2ban
#     - name: Copy filter ha.conf to fail2ban
#       template:
#         force: yes
#         src: ./etc/fail2ban/filter.d/ha.conf
#         dest: /etc/fail2ban/filter.d/ha.conf
#       notify:
#         - restart fail2ban
#     - name: Copy filter mosquitto-auth.conf to fail2ban
#       template:
#         force: yes
#         src: ./etc/fail2ban/filter.d/mosquitto-auth.conf
#         dest: /etc/fail2ban/filter.d/mosquitto-auth.conf
#       notify:
#         - restart fail2ban
#     - name: Copy jail ha.conf to fail2ban
#       template:
#         force: yes
#         src: ./etc/fail2ban/jail.d/ha.conf
#         dest: /etc/fail2ban/jail.d/ha.conf
#       notify:
#         - restart fail2ban
#     - name: Create symbolic link for fail2ban
#       become: yes
#       file:
#         src: "/var/log/fail2ban.log"
#         dest: "/smart-house/.docker/log/fail2ban.log"
#         state: link
