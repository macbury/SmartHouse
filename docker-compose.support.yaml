# Supporting services, like database that always must be online
version: '3.5'

services:
  grocy:
    image: linuxserver/grocy:latest
    ports:
      - '59000:80'
    volumes:
      - .docker/data/grocy2:/config
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Warsaw
  simple-login-crontab:
    image: simplelogin/app:1.0.0
    network_mode: host
    restart: unless-stopped
    depends_on:
      - database
    env_file:
      - '.env.simplelogin'
    volumes:
      - .docker/data/simple-login/keys/dkim.key:/dkim.key
      - .docker/data/simple-login/keys/dkim.pub.key:/dkim.pub.key
      - .env.simplelogin:/code/.env
    command: yacron -c /code/crontab.yml
  simple-login-email:
    image: simplelogin/app:1.0.0
    network_mode: host
    restart: unless-stopped
    ports:
      - "0.0.0.0:20381:20381"
    depends_on:
      - database
    env_file:
      - '.env.simplelogin'
    volumes:
      - .docker/data/simple-login/keys/dkim.key:/dkim.key
      - .docker/data/simple-login/keys/dkim.pub.key:/dkim.pub.key
      - .env.simplelogin:/code/.env
    command: python email_handler.py
  simple-login:
    image: simplelogin/app:1.0.0
    network_mode: host
    restart: unless-stopped
    ports:
      - "0.0.0.0:7777:7777"
    depends_on:
      - database
    env_file:
      - '.env.simplelogin'
    volumes:
      - .docker/data/simple-login/keys/dkim.key:/dkim.key
      - .docker/data/simple-login/keys/dkim.pub.key:/dkim.pub.key
      - .env.simplelogin:/code/.env
  gotify:
    image: gotify/server:latest
    ports:
      - "0.0.0.0:5580:80"
    volumes:
      - .docker/data/gotify:/app/data
  orion:
    build: ./orion/
    restart: unless-stopped
    ports:
      - "127.0.0.1:5500:5000"
      - "127.0.0.1:5501:8080"
    depends_on:
      - mysql
      - redis
  firefox:
    build: ./ff-sync/
    network_mode: host
    restart: unless-stopped
    env_file:
      - '.env.syncserver'
    environment:
      - SYNCSERVER_SQLURI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost:4101/ffsync
    depends_on:
      - database
  redis:
    image: redis:4.0.10
    ports:
      - 6379:6379
    volumes:
      - .docker/data/redis:/data
  nextcloud:
    build: ./nextcloud/
    ports:
      - 4333:80
    env_file:
      - '.env.nextcloud'
    volumes:
      - .docker/data/nextcloud_next:/var/www/html
    depends_on:
      - database
      - redis
  mqtt:
    restart: unless-stopped
    image: eclipse-mosquitto:latest
    ports:
      - 0.0.0.0:4105:1883
    volumes:
      - .docker/data/mosquitto:/mosquitto/data
      - .docker/log/mosquitto.log:/mosquitto/log/mosquitto.log
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
  influxdb:
    restart: unless-stopped
    image: influxdb:latest
    ports:
      - "0.0.0.0:18086:8086"
    volumes:
      - .docker/data/influxdb:/var/lib/influxdb
    env_file:
      - '.env.influxdb'
  database:
    image: postgres:9.6.10-alpine
    restart: unless-stopped
    security_opt:
      - seccomp:unconfined
    ports:
      - 0.0.0.0:4101:5432
    environment:
      PGDATA: /data
    env_file:
      - '.env.postgresql'
    volumes:
      - ./postgresql/:/docker-entrypoint-initdb.d/
      - .docker/data/postgresql:/data
      - /tmp/shared:/shared
  mysql:
    image: mysql:latest
    env_file:
      - '.env.mysql'
    volumes:
      - .docker/data/mysql:/var/lib/mysql
  grafana:
    image: grafana/grafana:5.4.2
    restart: unless-stopped
    user: "472"
    env_file:
      - '.env.grafana'
      - '.env.influxdb'
      - '.env.local'
    environment:
      GF_SERVER_DOMAIN: "${HOME_ASSISTANT_DOMAIN}"
      GF_SERVER_ROOT_URL: "https://${HOME_ASSISTANT_DOMAIN}/grafana/"
    ports:
      - "127.0.0.1:4100:3000"
    volumes:
      - .docker/data/grafana:/var/lib/grafana
    depends_on:
      - influxdb
  glances:
    restart: unless-stopped
    image: nicolargo/glances
    environment:
      - GLANCES_OPT=-w
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./glances/:/glances/conf/
    ports:
      - 4108:61208
  vacuum:
    build: ./vacuum/
    volumes:
      - .docker/data/vacuum:/app/public
    ports:
      - 10005:3000
  esphome:
    image: esphome/esphome:latest
    volumes:
      - .docker/data/esphome:/config
      - /etc/localtime:/etc/localtime:ro
    network_mode: host
  notes:
    build: ./notes/
    ports:
      - 12005:3000
    links:
      - mysql
    env_file:
      - '.env.notes'
      - '.env.mysql'
  rss:
    image: miniflux/miniflux:latest
    restart: unless-stopped
    ports:
      - 12008:8080
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/miniflux?sslmode=disable
    env_file:
      - '.env.rss'
  blog:
    image: blog:latest
    network_mode: host
    volumes:
      - .docker/data/blog/store:/app/public/store
      - .docker/data/blog/system:/app/public/system
      - .docker/data/blog/application.yml:/app/config/application.yml
      - .docker/data/blog/database.yml:/app/config/database.yml
      - .docker/data/blog/secrets.yml:/app/config/secrets.yml
  speedtest:
    image: macbury/speedtest:latest
    env_file:
      - '.env.speedtest'
    ports:
      - 6888:80
  monio:
    restart: unless-stopped
    image: macbury/mon.io:latest
    network_mode: host
    volumes:
      - .docker/data/monio/:/app/storage
    env_file:
      - .env.monio
    depends_on:
      - database
  youtube:
    build: ./youtube/
    restart: unless-stopped
    ports:
      - "127.0.0.1:7883:3000"
    volumes:
      - .docker/data/invidious/config.yml:/invidious/config/config.yml
    depends_on:
      - database
